<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

	
<module name="Checker">
	<property name="severity" value="warning" />

	<module name="TreeWalker">
	
	<!-- Annotations -->
	<!-- Block Checks -->
	<!-- Class Design -->
	<!-- Coding -->
	<!-- Duplicate Code -->
	<!-- Headers -->
	<!-- Imports -->
	<!-- Javadoc Comments -->
	<!-- Metrics -->
	<!-- Miscellaneous -->
	<!-- Modifiers -->
	<!-- Naming Conventions -->
	<!-- Regexp -->
	<!-- Size Violations -->
	
	
	
	

		<!--
			This check controls the style with the usage of annotations
			http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle
		-->
		<module name="AnnotationUseStyle" />

		<!--
			Verifies that both the java.lang.Deprecated annotation is present and the @deprecated Javadoc tag
			is present when either is present.
			http://checkstyle.sourceforge.net/config_annotation.html#MissingDeprecated
		-->
		<module name="MissingDeprecated" />

		<!--
			Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is
			present. http://checkstyle.sourceforge.net/config_annotation.html#MissingOverride
		-->
		<module name="MissingOverride" />

		<!--
			Ensures that the names of abstract classes conforming to some regular expression.
			http://checkstyle.sourceforge.net/config_naming.html#AbstractClassName
		-->
		<!-- <module name="AbstractClassName" /> -->

		<!--
			Checks that class type parameter names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#ClassTypeParameterName
		-->
		<module name="ClassTypeParameterName" />

		<!--
			Checks that constant names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#ConstantName
		-->
		<module name="ConstantName" />
			

		<!--
			Checks that local final variable names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#LocalFinalVariableName
		-->
		<module name="LocalFinalVariableName" />

		<!--
			Checks that local, non-final variable names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#LocalVariableName
		-->
		<module name="LocalVariableName" />

		<!--
			Checks that instance variable names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#MemberName
		-->
		<module name="MemberName" />

		<!--
			Checks that instance variable names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#MemberName
		-->
		<module name="MethodName" />

		<!--
			Checks that class type parameter names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName
		-->
		<module name="MethodTypeParameterName" />

		<!--
			Checks that package names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#PackageName
		-->

		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
		</module>

		<!--
			Checks that parameter names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#ParameterName
		-->
		<module name="ParameterName" />

		<!--
			Checks that static, non-final variable names conform to a format specified by the format
			property. http://checkstyle.sourceforge.net/config_naming.html#StaticVariableName
		-->
		<module name="StaticVariableName" />

		<!--
			Checks that type names conform to a format specified by the format property.
			http://checkstyle.sourceforge.net/config_naming.html#TypeName
		-->
		<module name="TypeName" />

		<!--
			Checks for long methods and constructors.
			http://checkstyle.sourceforge.net/config_sizes.html#MethodLength
		-->
		<module name="MethodLength" />

		<!--
			Checks the number of parameters of a method or constructor.
			http://checkstyle.sourceforge.net/config_sizes.html#ParameterNumber
		-->
<!--
		<module name="ParameterNumber" >
			<property name="max" value="10"/>
		</module>
-->
		<!--
			Checks that the whitespace around the Generic tokens < and > is correct to the typical
			convention. The convention is not configurable.
			http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace
		-->
		<module name="GenericWhitespace" />

		<!--
			Checks that the order of modifiers conforms to the suggestions in the Java Language
			specification, sections 8.1.1, 8.3.1 and 8.4.3.
			http://checkstyle.sourceforge.net/config_modifier.html#ModifierOrder
		-->
		<module name="ModifierOrder" />

		<!--
			Checks for redundant modifiers in interface and annotation definitions. Also checks for redundant
			final modifiers on methods of final classes.
			http://checkstyle.sourceforge.net/config_modifier.html#RedundantModifier
		-->
		<!-- <module name="RedundantModifier" /> -->

		<!--
			Finds nested blocks, i.e. blocks that are used freely in the code.
			http://checkstyle.sourceforge.net/config_blocks.html#AvoidNestedBlocks
		-->
		<module name="AvoidNestedBlocks" />

		<!--
			Checks for empty blocks. http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock
		-->
		<module name="EmptyBlock" />


		<!--
			Checks for the placement of left curly braces ('{') for code blocks.
			http://checkstyle.sourceforge.net/config_blocks.html#LeftCurly
		-->
		<module name="LeftCurly" />

		<!--
			Checks for braces around code blocks
			http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces
		-->
		<module name="NeedBraces" />

		<!--
			Checks the placement of right curly braces ('}') for else, try, and catch tokens.
			http://checkstyle.sourceforge.net/config_blocks.html#RightCurly
		-->
		<module name="RightCurly" />

		<!--
			Checks cyclomatic complexity against a specified limit. The complexity is measured by the number
			of if, while, do, for, ?:, catch, switch, case statements, and operators && and || (plus one) in
			the body of a constructor, method, static initializer, or instance initializer. It is a measure
			of the minimum number of possible paths through the source and therefore the number of required
			tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor
			now! http://checkstyle.sourceforge.net/config_metrics.html#CyclomaticComplexity
		-->
		<module name="CyclomaticComplexity" >
			<property name="max" value="16" />
		</module>

		<!--
			Checks that classes that define a covariant equals() method also override method
			equals(java.lang.Object). http://checkstyle.sourceforge.net/config_coding.html#CovariantEquals
		-->
		<module name="CovariantEquals" />

		<!--
			Check that the default is after all the cases in a switch statement.
			http://checkstyle.sourceforge.net/config_coding.html#DefaultComesLast
		-->
		<module name="DefaultComesLast" />

		<!--
			The "double-checked locking" idiom (DCL) tries to avoid the runtime cost of synchronization
			http://checkstyle.sourceforge.net/config_coding.html#DoubleCheckedLocking
		-->
		<module name="DoubleCheckedLocking" />

		<!--
			Detects empty statements (standalone ;)
			http://checkstyle.sourceforge.net/config_coding.html#EmptyStatement
		-->
		<module name="EmptyStatement" />

		<!--
			Checks that classes that override equals() also override hashCode().
			http://checkstyle.sourceforge.net/config_coding.html#EqualsHashCode
		-->
		<module name="EqualsHashCode" />

		<!--
			Checks if any class or object member explicitly initialized to default for its type value (null
			for object references, zero for numeric types and char and false for boolean.
			http://checkstyle.sourceforge.net/config_coding.html#ExplicitInitialization
		-->
		<module name="ExplicitInitialization" />

		<!--
			Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.
			http://checkstyle.sourceforge.net/config_coding.html#InnerAssignment
		-->
		<module name="InnerAssignment" />

		<!--
			Check for ensuring that for loop control variables are not modified inside the for block.
			http://checkstyle.sourceforge.net/config_coding.html#ModifiedControlVariable
		-->
		<module name="ModifiedControlVariable" />

		<!--
			Ensure a class is has a package declaration.
			http://checkstyle.sourceforge.net/config_coding.html#PackageDeclaration
		-->
		<module name="PackageDeclaration" />

		<!--
			Disallow assignment of parameters. Rationale: Parameter assignment is often considered poor
			programming practice. Forcing developers to declare parameters as final is often onerous. Having
			a check ensure that parameters are never assigned would give the best of both worlds.
			http://checkstyle.sourceforge.net/config_coding.html#ParameterAssignment
		-->
		<module name="ParameterAssignment" />

		<!--
			Restricts the number of return statements. Rationale: Too many return points can be indication
			that code is attempting to do too much or may be difficult to understand.
			http://checkstyle.sourceforge.net/config_coding.html#ReturnCount
		-->
		<module name="ReturnCount">
			<property name="max" value="16" />
		</module>

		<!--
			Checks for overly complicated boolean expressions.
			http://checkstyle.sourceforge.net/config_coding.html#SimplifyBooleanExpression
		-->
		<module name="SimplifyBooleanExpression" />

		<!--
			Checks for overly complicated boolean return statements.
			http://checkstyle.sourceforge.net/config_coding.html#SimplifyBooleanReturn
		-->
		<module name="SimplifyBooleanReturn" />

		<!--
			Checks that an overriding clone() method invokes super.clone().
			http://checkstyle.sourceforge.net/config_coding.html#SuperClone
		-->
		<module name="SuperClone" />

		<!--
			Checks that an overriding finalize() method invokes super.finalize().
			http://checkstyle.sourceforge.net/config_coding.html#SuperFinalize
		-->
		<module name="SuperFinalize" />

		<!--
			Checks for the use of unnecessary parentheses
			http://checkstyle.sourceforge.net/config_coding.html#UnnecessaryParentheses
		-->
		<module name="UnnecessaryParentheses" />

		<!--
			Checks for long lines. http://checkstyle.sourceforge.net/config_sizes.html#LineLength
		-->
<!--	
		<module name="LineLength">
			<property name="ignorePattern" value="(^ *\* *[^ ]+$)|(import [^ ]+;$)|(^(\t| )*\* .+$)|^\s*@.*" />
			<property name="max" value="144" />
			<property name="tabWidth" value="4" />
		</module>
-->

	</module>

	<module name="FileLength" />
</module>
